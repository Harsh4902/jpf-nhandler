jpf-nhandler = ${config_path}

jpf-nhandler.native_classpath =\
   ${jpf-nhandler}/build/jpf-nhandler.jar;\
   ${jpf-nhandler}/lib/*.jar;\

jpf-nhandler.classpath =\
   ${jpf-nhandler}/build/jpf-nhandler-classes.jar;\
   ${jpf-nhandler}/build/examples

jpf-nhandler.test_classpath =\
   ${jpf-nhandler}/build/tests

jpf-nhandler.sourcepath =\
   ${jpf-nhandler}/src/examples

jpf-nhandler.peer_packages = test.converter

vm.sysprop.source=host

listener+=,gov.nasa.jpf.nhandler.forward.JVMForwarder

## by setting this to true, all the peers (both classes and source files) created on the fly 
## in the onthefly dir are removed once the search starts
nhandler.reset.onthefly = true

## by setting this to true, all the peer classes created on the fly in the onthefly dir are 
## removed once the search starts
nhandler.reset.classes = false

## by setting this to true all unhandled native calls will be handled
# nhandler.delegate.natives = true

## by setting this to true all unhandled native calls will be skipped, i.e. they
## become like empty methods and return some dummey values
# nhandler.skip.natives = true

## list of the methods to be handled by jpf-nhandler
 nhandler.delegate.spec =java.lang.Class.isMemberClass,java.lang.Class.isSynthetic

## list of the methods to be skipped, i.e. they become like empty methods and return 
## some dummey values
# nhandler.skip.spec = java.lang.Class.isSynthetic

## list of methods to be filtered
# nhandler.filter.spec = java.lang.Class.isMemberClass

## by setting this to true the source code for native peers will be generate
nhandler.generate.source = true

## <2do> - this option has not been implemented yet
## by setting this to true, nhandler creates the on-the-fly peer classes while 
## handling & skipping the methods, OW it just execute them directly outside of 
## on-the-fly peers
# nhandler.create.OTF_peers = true