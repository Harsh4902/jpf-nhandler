jpf-nhandler = ${config_path}

jpf-nhandler.native_classpath =\
   ${jpf-nhandler}/build/jpf-nhandler.jar;\
   ${jpf-nhandler}/lib/*.jar;\

jpf-nhandler.classpath =\
   ${jpf-nhandler}/build/jpf-nhandler-classes.jar;\
   ${jpf-nhandler}/build/examples

jpf-nhandler.test_classpath =\
   ${jpf-nhandler}/build/tests

jpf-nhandler.sourcepath =\
   ${jpf-nhandler}/src/examples

jpf-nhandler.peer_packages = test.converter

vm.sysprop.source=host

listener+=,gov.nasa.jpf.nhandler.forward.JVMForwarder

# by setting this to true all unhandled native calls will be handled
#nhandler.delegate.natives = true
#nhandler.skip.natives = true

# list of methods to be handled by jpf-nhandler
nhandler.delegate.spec =java.lang.Class.isMemberClass,java.lang.Class.isSynthetic

# list of methods to be skipped; they are executed as if they are empty
#nhandler.skip.spec = java.lang.Class.isSynthetic

# list of methods to be filtered
nhandler.filter.spec = java.lang.Class.isMemberClass

# If it is true, nhandler creates the on-the-fly peer classes while handling 
# & skipping the methods, OW it just execute them directly outside of OTF peers
#nhandler.create.OTF_peers = true

#nhandler.create.source = true